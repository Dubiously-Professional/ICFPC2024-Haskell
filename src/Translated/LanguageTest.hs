{-# LANGUAGE BlockArguments #-}

module LanguageTest where

ifthen cond t f = if cond then t else f
result = ifthen (==) ($) ($) ($) ($) \v3 -> \v3 -> \v3 -> \v2 -> v3 1 2 3 4 3 ifthen (==) ($) \v3 -> v3 10 10 ifthen (==) drop 3 "test" "t" ifthen (==) take 3 "test" "tes" ifthen (==) (++) "te" "st" "test" ifthen not (&&) True False ifthen (&&) True True ifthen not (||) False False ifthen (||) False True ifthen (<) negate 3 negate 2 ifthen (>) 3 2 ifthen (==) negate 1 (%) negate 3 2 ifthen (==) 1 (%) 7 3 ifthen (==) negate 1 (/) negate 3 2 ifthen (==) 2 (/) 7 3 ifthen (==) 6 (*) 2 3 ifthen (==) 3 (+) 1 2 ifthen (==) show 15818151 "test" ifthen (==) read "test" 15818151 ifthen not False ifthen (==) negate 3 (-) 2 5 ifthen (==) 3 (-) 5 2 ifthen (==) "test" "test" ifthen (==) False False ifthen (==) 3 3 ifthen True (++) (++) "Self-check OK, send `solve language_test " show (+) 2 (*) 311 124753942619 "` to claim points for it" "if is not correct" "binary = is not correct" "binary = is not correct" "binary = is not correct" "binary - is not correct" "unary - is not correct" "unary ! is not correct" "unary # is not correct" "unary $ is not correct" "binary + is not correct" "binary * is not correct" "binary / is not correct" "binary / is not correct" "binary % is not correct" "binary % is not correct" "binary > is not correct" "binary < is not correct" "binary | is not correct" "binary | is not correct" "binary & is not correct" "binary & is not correct" "binary . is not correct" "binary T is not correct" "binary D is not correct" "application is not correct" "application is not correct"